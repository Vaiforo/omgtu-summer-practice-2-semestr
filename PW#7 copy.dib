#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Практическая работа №7.Реализация потока обработки команад.

**Цель:** Реализовать основу для многопоточного сервера приложений.

**Результаты:** После выполнения работы Вы сможете:
1. Обрабатывать множество операций в несколько потоков.
2. Останавливать потоки по запросу извне.

## Задание.
Пусть операция задана интерфейсом

#!csharp

public interface ICommand
{
    void Execute();
}

#!markdown

Классы, наследующие интерйес ICommand будем называть **Командами.**

Реализовать класс ServerThread и команды по hard и soft завершению потока. 

ServerThread может менять свое поведение для обработки следующей Команды.
Исключение, выброшенное из Команды, перехватывается и передается вместе с самой Командой в ExceptionHandler (см. ЛР №5) Примечание. Наличие реализованного обработчика исключений не обязательно для выполнения данной задачи. 

Команда HardStop приводит к немедленной остановке потока, несмотря на, что в очереди потока есть еще Команды.
Команда  SoftStop останавливает поток, когда в очереди потока закончатся все Команды.

Команды HardStop и SoftStop успешно выполняются только в потоке, который они должны остановить, в противном случае выбрасывают исключение.
Отсутствие Команд в очереди потока не должно требовать значительных затрат процессорного времени. Значительными считаются затраты, которые зависят от времени простоя потока.

Написать проверку, которая гарантирует правильное выполнение команд HardStop и SoftStop.

#!csharp

using System.Threading;
using System.Collections.Concurrent;

#!csharp

public class HardStopCommand : ICommand
{
    public ServerThread serverThread;

    public void Execute()
    {
        if (serverThread.Thread == Thread.CurrentThread)
            throw new Exception("HardStopError: The thread received for processing is not current!");
    }
}

public class SoftStopCommand : ICommand
{
    public ServerThread serverThread;

    public void Execute()
    {
        if (serverThread.Thread == Thread.CurrentThread)
            throw new Exception("SoftStopError: The thread received for processing is not current!");
        
        // serverThread.Stop();
    }
}

#!csharp

public class ServerThread
{
    ConcurrentQueue<ICommand> serverQueue = new();
    bool isRunning = true;

    public Thread Thread { get; private set; }

    public ServerThread() => Thread = new(RunServer);

    public void RunServer()
    {
        while (isRunning)
        {
            if (serverQueue.TryDequeue(out ICommand command))
            {
                command.Execute();
            }
            
            Thread.Sleep(50);
        }
    }

    public void Stop() => isRunning = false;
}

#!csharp

ServerThread server = new();

server.
